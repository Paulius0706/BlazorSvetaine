@page "/Users"
@using Svetaine.Shared
@using Svetaine.Shared.DbModels
@using Svetaine.Client.Pages.Components
@using Svetaine.Client.Pages.Components.User
@inject HttpClient Http

<PageTitle>Users</PageTitle>

<h1>Users</h1>

@if (users == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <button class="btn btn-dark" @onclick="@(() => userAdd.ModalSet())">Create</button>
    <UserAdd @ref="userAdd" Render="@(() => Render())"></UserAdd>
    <UserDelete @ref="userDelete" Render="@(() => Render())"></UserDelete>
    <UserUpdate @ref="userUpdate" Render="@(() => Render())"></UserUpdate>
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Email</th>
                <th>Password</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <td>@user.Id</td>
                    <td>@user.Name</td>
                    <td>@user.Email</td>
                    <td>@user.Password</td>
                    <td>
                        <button class="btn btn-danger" onclick="@(() => {userDelete.User = user; userDelete.ModalSet();})"> Delete </button>
                        <button class="btn btn-warning" onclick="@(() => {userUpdate.User = user; userUpdate.ModalSet();})"> Update </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    
}

@code {
    UserAdd userAdd;
    UserDelete userDelete;
    UserUpdate userUpdate;

    List<User> users;
    string CreateModalDisplayStyle = "none";

    SemaphoreSlim locker = new SemaphoreSlim(1, 1);
    public async Task Render(){
        locker.Wait();
        users = null;
        users = await Http.GetFromJsonAsync<List<User>>("api/User");
        StateHasChanged();
        locker.Release();
    }
    protected override async Task OnInitializedAsync()
    {
        Render(); 
    }
}
