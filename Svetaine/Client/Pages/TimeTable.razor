@page "/TimeTable"
@using Svetaine.Client.Pages.Components.ReserveTime
@using Svetaine.Shared
@using Svetaine.Shared.DbModels
@using Svetaine.Client.Pages.Components
@using Svetaine.Client.Pages.Components.User
@inject HttpClient Http

<PageTitle>Time Table</PageTitle>

<h1>Time Table</h1>
@if(UserList == null){
    <p><em>Loading...</em></p>
}
else
{
    <ReserveTimeAdd @ref="reserveTimeAdd" Render="@(() => Render())"></ReserveTimeAdd>
    <div class="row">
        <div class="col-3">
            <select class="form-control" @bind="@selectedUser.Id">
                <option value=""></option>
                @foreach (User user in UserList)
                {
                    <option value="@user.Id">@user.Name</option>
                }
            </select>
        </div>
        <button class="col-3 btn btn-secondary" @onclick="AddSelectedUser">Add Selected User</button>
    </div>

    <div class="border" style="min-height: 800px">
        <div class="border" style="width: 20%; height: 100%; float:left;">
            <div class="row p-0 m-0">
                <button class="col-12 btn btn-light"><i class="fa fa-clock"></i></button>
                <div class="border w-100" style="min-height: 800px;">
                </div>
            </div>
        </div>
        @foreach (User user in users)
        {
            <div class="border" style="width: @(80/users.Count)%; height: 100%;  float:left;">
                <div class="row p-0 m-0">
                    <button class="col-2 btn btn-secondary" @onclick="@(() => {ShiftTo(user.Id, -1);})"><i class="fa fa-arrow-left"></i></button>
                    <button class="col-6 btn btn-light" disabled>@user.Name</button>
                    <button class="col-2 btn btn-danger" @onclick="@(() => {DeleteSelectedUser(user.Id);})"><i class="fa fa-trash"></i></button>
                    <button class="col-2 btn btn-secondary" @onclick="@(() => {ShiftTo(user.Id,  1);})"><i class="fa fa-arrow-right"></i></button>
                </div>
                <div class="border w-100" style="min-height: 800px;">

                </div>
            </div>
        }
    </div>
}


@code{
    ReserveTimeAdd reserveTimeAdd;

    private string text = "";
    public User selectedUser;

    List<User> UserList;
    List<User> users;


    SemaphoreSlim locker = new SemaphoreSlim(1, 1);
    public async Task Render()
    {
        locker.Wait();
        UserList = null;
        UserList = await Http.GetFromJsonAsync<List<User>>("api/User");
        foreach(User user in users)
        {
            try
            {
                List<ReserveTime> times = await Http.GetFromJsonAsync<List<ReserveTime>>("api/User/" + user.Id + "/ReserveTime");
                foreach(ReserveTime time in times)
                {
                    time.User = user;
                }
            }
            catch(Exception e){}

        }



        StateHasChanged();
        locker.Release();
    }
    protected override async Task OnInitializedAsync()
    {
        selectedUser = new User();
        users = new List<User>();
        Render();
    }
    public async void AddSelectedUser(){
        if (users.Where(o => o.Id == selectedUser.Id).Count() > 0) return;
        User user = UserList.FirstOrDefault(o => o.Id == selectedUser.Id);
        if (user is null) return;
        users.Add(user);
        Render();
    }
    public async void DeleteSelectedUser(int index)
    {
        if (users.Count == 0) return;
        if (index < 0 || index >= users.Count) return;
        users.RemoveAt(index);
        Render();
    }
    public async void ShiftTo(int index, int shift){
        int index2 = index + shift;

        if (users.Count == 0) return;
        if (index < 0 || index >= users.Count) return;
        if (index2 < 0 || index2 >= users.Count) return;

        User user = users[index];
        users[index] = users[index2];
        users[index2] = user;
        Render();
    }
    
}
